export const article = {
    "title": "CI/CD for Angular Developers",
    "pubDate": "2022-02-24 12:44:03",
    "link": "https://betterprogramming.pub/ci-cd-for-angular-developers-be9a1485d22b?source=rss-a808f2c90640------2",
    "guid": "https://medium.com/p/be9a1485d22b",
    "author": "Bobby Galli",
    "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*AdRjJzfu9SjcnQn-X590zA.jpeg",
    "description": "\n<h4>Automate your releases with GitHub\u00a0Actions</h4>\n<figure><img alt=\"CI/CD Pipeline Powered by Turbo Charged Lego Cloud Computing\" src=\"https://cdn-images-1.medium.com/max/1024/1*AdRjJzfu9SjcnQn-X590zA.jpeg\"><figcaption>CI/CD Pipeline Powered by Turbo-Charged Lego People (Photo by <a href=\"https://www.shutterstock.com/image-photo/hong-kongmarch-1-lego-mini-characters-261763055\">Lewis Tse Pui\u00a0Lung</a>)</figcaption></figure><h3>\ud83d\udcd6 Definition</h3>\n<blockquote>\u201cCI/CD [Continuous Integration and Continuous Delivery] is a method to frequently deliver apps to customers by introducing automation into the stages of app development\u201d\u200a\u2014\u200a<a href=\"https://www.redhat.com/en/topics/devops/what-is-ci-cd\">redhat.com</a>\n</blockquote>\n<h3>\ud83d\udca7 Getting Our Feet\u00a0Wet</h3>\n<p>Releasing software manually is about as fun stepping in gum everyday for the rest of your life. Manual releases are time consuming, prone to mistakes, and a total buzzkill. Modern tools make releasing new versions of your software easy as pie\u00a0\ud83e\udd67.</p>\n<p>In this article we\u2019re going to outline the following:</p>\n<ul>\n<li>\ud83c\udfca Create a CI/CD friendly\u00a0workflow</li>\n<li>\ud83d\udeb4 Publish the library to\u00a0npm</li>\n<li>\ud83c\udfc3 Deploy the sample to GitHub\u00a0Pages</li>\n</ul>\n<p>For a reference implementation that demonstrates how to publish an Angular Library with a corresponding sample application, please checkout <a href=\"https://github.com/bobbyg603/ngx-toggle\">ngx-toggle</a>.</p>\n<h3>\ud83e\udd3f Diving\u00a0In</h3>\n<p>A few terminal commands are all it takes to create a new Angular library. First, create a new project using <a href=\"https://github.com/angular/angular-cli\">@angular/cli</a>:</p>\n<pre>ng new ngx-toggle --no-create-application</pre>\n<p>Next, create a new\u00a0library:</p>\n<pre>ng g library ngx-toggle</pre>\n<p>Finally, create a sample so you can show off your\u00a0library:</p>\n<pre>ng g app ngx-toggle-example</pre>\n<p>For more information on how to create Angular libraries please see the official Angular\u00a0<a href=\"https://angular.io/guide/creating-libraries\">docs</a>.</p>\n<h3>\ud83c\udfca Keep\u00a0Swimming</h3>\n<p>Once you\u2019ve created a library the next step is to configure your workflow so that it plays nicely with an automated release\u00a0process.</p>\n<p>By following specific conventions when authoring commit messages you can leverage <a href=\"https://github.com/semantic-release/semantic-release\">semantic-release</a> to increment your package\u2019s version, generate release notes, and publish to npm. Semantic-release relies on the <a href=\"https://www.conventionalcommits.org/en/v1.0.0/#summary\">Conventional Commits</a> standard in order to work it\u2019s\u00a0magic.</p>\n<p>Enforcing Conventional Commits manually is a tall order. Instead, let\u2019s use <a href=\"https://github.com/typicode/husky\">Husky</a> and <a href=\"https://github.com/conventional-changelog/commitlint\">commitlint</a> to reject commit messages that don\u2019t meet specific criteria.</p>\n<p>Let\u2019s get to work! First install the aformentioned packages:</p>\n<pre>npm i -D husky @commitlint/cli @commitlint/config-conventional</pre>\n<p>Create a\u00a0.commitlintrc.js file at the root of the project that instructs commitlint it to use the @commitlint/config-conventional configuration and a few rules that will come in handy\u00a0later:</p>\n<a href=\"https://medium.com/media/ab8f1d6b1fee9340edd264d1f22ca450/href\">https://medium.com/media/ab8f1d6b1fee9340edd264d1f22ca450/href</a><p>Install <a href=\"https://git-scm.com/docs/githooks\">git hooks</a> with husky in order to run commitlint when a new commit is authored:</p>\n<pre>npx husky install</pre>\n<p>Add the commit message hook and add the newly created\u00a0.husky/commit-msg file to your git\u00a0repo:</p>\n<pre>npx husky add .husky/commit-msg 'npx --no-install commitlint --edit'</pre>\n<p>Add a prepare script to your project\u2019s package.json so that husky will install git hooks when new contributors clone your project and run npm\u00a0i:</p>\n<pre>npm pkg set scripts.prepare=\"husky install\"</pre>\n<p>Congrats! The next time you author a commit the message will need to be prefixed with chore:, fix:, or feat: otherwise git will throw an error. More information regarding which prefix you should choose when authoring a commit message can be found\u00a0<a href=\"https://www.conventionalcommits.org/en/v1.0.0/#summary\">here</a>.</p>\n<h3>\ud83d\udeb4 Get on the\u00a0Bike</h3>\n<p>The next leg of the journey includes setting up our CI/CD pipeline to build our project, and run our tests. For this section, we\u2019re going to assume that you\u2019ve already built an Angular library and are ready to publish. If you don\u2019t already have a library ready to publish feel free to fork <a href=\"https://github.com/bobbyg603/ngx-toggle\">ngx-toggle</a> so that you can follow\u00a0along.</p>\n<p>First, let\u2019s add an GitHub Actions Workflow for continuous integration. Add the following snippet to a new file\u00a0.github/workflows/ci.yml:</p>\n<a href=\"https://medium.com/media/ea1c68427a6d8350cd33d950dbd95be1/href\">https://medium.com/media/ea1c68427a6d8350cd33d950dbd95be1/href</a><p>In order for GitHub Actions to run this workflow we\u2019ll need to make a few modifications to our Angular library. Add build:app, build:lib, and build:ci scripts to give the build machine a means to build both the library and the\u00a0sample:</p>\n<pre>npm set-script build:app \"ng build ngx-toggle-example --configuration=production --base-href=/ngx-toggle/\"<br>npm set-script build:lib \"ng build ngx-toggle --configuration=production\"<br>npm set-script build:ci \"npm run build:lib &amp;&amp; npm run build:app\"</pre>\n<p>We added a --base-href=/ngx-toggle/ argument to the build script so that we can deploy to a subdirectory of our GitHub Pages user site (more on this\u00a0later).</p>\n<p>We also want to distribute the README.md file at the root of our repo along with the library. Let\u2019s install copyfiles and add one more script to copy README.md into our library\u2019s dist directory every time we run build:lib:</p>\n<pre>npm i -D copyfiles &amp;&amp; npm set-script postbuild:lib \"copyfiles README.md dist/ngx-toggle\"</pre>\n<p>Next, add a ChromeHeadlessCI browser and customerLaunchers entry in each of your projects\u2019 karma.conf.js files. The following snippet should be put at the top-level of the object that is passed to config.set:</p>\n<pre>browsers: [<br>    'Chrome',<br>    'ChromeHeadlessCI'<br>],<br>customLaunchers: {<br>    ChromeHeadlessCI: {<br>        base: 'ChromeHeadless',<br>        flags: ['--no-sandbox']<br>    }<br>},</pre>\n<p>Finally, we need to create test:app test:lib and test:ci scripts in package.json so that we can run our tests on a GitHub Actions compatible browser without pausing for input or displaying progress:</p>\n<pre>npm set-script test:app \"ng test ngx-toggle-example --no-watch --no-progress --browsers=ChromeHeadlessCI\"<br>npm set-script test:lib \"ng test ngx-toggle --no-watch --no-progress --browsers=ChromeHeadlessCI\"<br>npm set-script test:ci \"npm run test:lib &amp;&amp; npm run test:app\"</pre>\n<p>Now that these scripts have been created the ci.yml workflow action will be run for each pull request to the main branch. It\u2019s recommended you require the CI workflow to run before pull requests can be merged into your default branch. For a quick guide that describes branch protection with status checks please see this\u00a0<a href=\"https://medium.com/@bobbyg603/github-status-checks-and-branch-protection-made-easy-b70d6d9ffc76\">article</a>.</p>\n<h3>\ud83c\udfc3 Run to the Finish\u00a0Line</h3>\n<p>The final piece of the puzzle is to release our library and sample each time a change is pushed to our default branch. We will use <a href=\"https://github.com/semantic-release/cli\">semantic-release-cli</a> to publish our package to <a href=\"https://www.npmjs.com/\">npm</a> and our sample to <a href=\"https://pages.github.com/\">GitHub\u00a0Pages</a>.</p>\n<p>Let\u2019s install semantic-release-cli and a few plugins as dev dependencies:</p>\n<pre>npm i -D semantic-release-cli <a href=\"http://twitter.com/semantic\">@semantic</a>-release/changelog <a href=\"http://twitter.com/semantic\">@semantic</a>-release/git</pre>\n<p>Run semantic-release-cli to start the configuration process:</p>\n<pre>npx semantic-release-cli setup</pre>\n<p>The setup command will prompt you to input your credentials in order to configure your release. You\u2019ll need to generate a <a href=\"https://github.com/settings/tokens/new?scopes=repo\">GitHub token</a> with the repo scope. Also, you\u2019ll need to ensure your <a href=\"https://docs.npmjs.com/about-two-factor-authentication#two-factor-authentication-modes-on-npm\">2-FA settings</a> are set to to auth-only:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ATHmTUhxJyqOnnXpipG70w.png\"><figcaption>Terminal Output for Semantic Release\u00a0CLI</figcaption></figure><p>Just to be safe, you should change your npm password after entering it into the\u00a0prompt.</p>\n<p>Next, create a\u00a0.releaserc file at the root of your project so that we can customize semantic-release. We will need to specify the pkgRoot directory in order for @semantic-release/npm to publish the correct list of\u00a0files:</p>\n<a href=\"https://medium.com/media/b19f4b3f77cedc6ccde8356c32a23b91/href\">https://medium.com/media/b19f4b3f77cedc6ccde8356c32a23b91/href</a><p>Next, we\u2019re going to publish our sample to a sub-directory in a <a href=\"https://pages.github.com/\">GitHub Pages user site</a>. You can create a GitHub Pages site for your user or organization by creating a new repo with a name username.github.io being sure to replace username with your username or organization name (e.g. bobbyg603.github.io).</p>\n<p>In order to publish to your GitHub Pages user site you\u2019ll need to generate a <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">personal access token</a> with the repo scope. This token will allow GitHub Actions to publish the sample to your username.github.io user\u00a0site:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/842/1*FUVIydwdZIT1txDaVTesMg.png\"><figcaption>New Personal Access Token with Repo\u00a0Scope</figcaption></figure><p>Once you\u2019ve generated your token, add a GH_TOKEN <a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository\">repository secret</a> so the personal access token can be used by our deployment workflow.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iefQOT8GCf5scmBN6TEHXg.png\"><figcaption>Adding a GH_TOKEN Repository Secret</figcaption></figure><p>We now have all the pieces necessary to create our\u00a0.github/workflows/cd.yml deployment workflow! This workflow will run for every push to our main branch and will publish a new version of our library to <a href=\"https://www.npmjs.com/package/@bobbyg603/ngx-toggle\">npm</a> and copy our sample to our <a href=\"https://bobbyg603.github.io/ngx-toggle/\">GitHub Pages user\u00a0site</a>:</p>\n<a href=\"https://medium.com/media/7117cdc60d2b54fb0023c429718020b8/href\">https://medium.com/media/7117cdc60d2b54fb0023c429718020b8/href</a><p>Under the <strong>Deploy \ud83d\ude80 </strong>step you\u2019ll need to replace the values for repository-name, folder, and target-folder with values that are specific to your GitHub Pages repo and\u00a0project.</p>\n<h3>\ud83c\udfc1 Celebrate Your\u00a0Victory!</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VXa9So6PmB7WRO_ro-ofIQ.gif\"></figure><p>Congratulations!</p>\n<p>You\u2019ve just configured a really powerful CI/CD pipeline for your Angular app! To test the integration, open and merge a pull request to the main\u00a0branch.</p>\n<p>When you open the <a href=\"https://github.com/bobbyg603/ngx-toggle/pull/1\">pull request</a> you should be prevented from merging until the ci.yml <a href=\"https://github.com/bobbyg603/ngx-toggle/runs/5295770975?check_suite_focus=true\">workflow</a> has completed successfully.</p>\n<p>After merging, the cd.yml <a href=\"https://github.com/bobbyg603/ngx-toggle/runs/5295804809?check_suite_focus=true\">workflow</a> should run, create a <a href=\"https://github.com/bobbyg603/ngx-toggle/tags\">tag</a>, generate a GitHub <a href=\"https://github.com/bobbyg603/ngx-toggle/releases/tag/v1.0.1\">release</a>, update <a href=\"https://github.com/bobbyg603/ngx-toggle/blob/main/CHANGELOG.md\">CHANGELOG.md</a>, <a href=\"https://github.com/bobbyg603/ngx-toggle/pulls?q=is%3Apr+is%3Aclosed+label%3Areleased\">label</a> the pull request as released, and <a href=\"https://github.com/bobbyg603/bobbyg603.github.io/commit/02e78c912a1efcc40b9405edc538b44cab5bee5a\">deploy</a> the sample to your <a href=\"https://bobbyg603.github.io/ngx-toggle\">GitHub Pages\u00a0site</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre>If you found the information in this tutorial useful please subscribe on <a href=\"http://bobbyg603.medium.com/\">Medium</a>, follow me on <a href=\"https://twitter.com/bobbyg603\">Twitter</a>, and/or subscribe to my <a href=\"https://www.youtube.com/c/bobbyg603\">YouTube</a> channel.</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=be9a1485d22b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/ci-cd-for-angular-developers-be9a1485d22b\">CI/CD for Angular Developers</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<h4>Automate your releases with GitHub\u00a0Actions</h4>\n<figure><img alt=\"CI/CD Pipeline Powered by Turbo Charged Lego Cloud Computing\" src=\"https://cdn-images-1.medium.com/max/1024/1*AdRjJzfu9SjcnQn-X590zA.jpeg\"><figcaption>CI/CD Pipeline Powered by Turbo-Charged Lego People (Photo by <a href=\"https://www.shutterstock.com/image-photo/hong-kongmarch-1-lego-mini-characters-261763055\">Lewis Tse Pui\u00a0Lung</a>)</figcaption></figure><h3>\ud83d\udcd6 Definition</h3>\n<blockquote>\u201cCI/CD [Continuous Integration and Continuous Delivery] is a method to frequently deliver apps to customers by introducing automation into the stages of app development\u201d\u200a\u2014\u200a<a href=\"https://www.redhat.com/en/topics/devops/what-is-ci-cd\">redhat.com</a>\n</blockquote>\n<h3>\ud83d\udca7 Getting Our Feet\u00a0Wet</h3>\n<p>Releasing software manually is about as fun stepping in gum everyday for the rest of your life. Manual releases are time consuming, prone to mistakes, and a total buzzkill. Modern tools make releasing new versions of your software easy as pie\u00a0\ud83e\udd67.</p>\n<p>In this article we\u2019re going to outline the following:</p>\n<ul>\n<li>\ud83c\udfca Create a CI/CD friendly\u00a0workflow</li>\n<li>\ud83d\udeb4 Publish the library to\u00a0npm</li>\n<li>\ud83c\udfc3 Deploy the sample to GitHub\u00a0Pages</li>\n</ul>\n<p>For a reference implementation that demonstrates how to publish an Angular Library with a corresponding sample application, please checkout <a href=\"https://github.com/bobbyg603/ngx-toggle\">ngx-toggle</a>.</p>\n<h3>\ud83e\udd3f Diving\u00a0In</h3>\n<p>A few terminal commands are all it takes to create a new Angular library. First, create a new project using <a href=\"https://github.com/angular/angular-cli\">@angular/cli</a>:</p>\n<pre>ng new ngx-toggle --no-create-application</pre>\n<p>Next, create a new\u00a0library:</p>\n<pre>ng g library ngx-toggle</pre>\n<p>Finally, create a sample so you can show off your\u00a0library:</p>\n<pre>ng g app ngx-toggle-example</pre>\n<p>For more information on how to create Angular libraries please see the official Angular\u00a0<a href=\"https://angular.io/guide/creating-libraries\">docs</a>.</p>\n<h3>\ud83c\udfca Keep\u00a0Swimming</h3>\n<p>Once you\u2019ve created a library the next step is to configure your workflow so that it plays nicely with an automated release\u00a0process.</p>\n<p>By following specific conventions when authoring commit messages you can leverage <a href=\"https://github.com/semantic-release/semantic-release\">semantic-release</a> to increment your package\u2019s version, generate release notes, and publish to npm. Semantic-release relies on the <a href=\"https://www.conventionalcommits.org/en/v1.0.0/#summary\">Conventional Commits</a> standard in order to work it\u2019s\u00a0magic.</p>\n<p>Enforcing Conventional Commits manually is a tall order. Instead, let\u2019s use <a href=\"https://github.com/typicode/husky\">Husky</a> and <a href=\"https://github.com/conventional-changelog/commitlint\">commitlint</a> to reject commit messages that don\u2019t meet specific criteria.</p>\n<p>Let\u2019s get to work! First install the aformentioned packages:</p>\n<pre>npm i -D husky @commitlint/cli @commitlint/config-conventional</pre>\n<p>Create a\u00a0.commitlintrc.js file at the root of the project that instructs commitlint it to use the @commitlint/config-conventional configuration and a few rules that will come in handy\u00a0later:</p>\n<a href=\"https://medium.com/media/ab8f1d6b1fee9340edd264d1f22ca450/href\">https://medium.com/media/ab8f1d6b1fee9340edd264d1f22ca450/href</a><p>Install <a href=\"https://git-scm.com/docs/githooks\">git hooks</a> with husky in order to run commitlint when a new commit is authored:</p>\n<pre>npx husky install</pre>\n<p>Add the commit message hook and add the newly created\u00a0.husky/commit-msg file to your git\u00a0repo:</p>\n<pre>npx husky add .husky/commit-msg 'npx --no-install commitlint --edit'</pre>\n<p>Add a prepare script to your project\u2019s package.json so that husky will install git hooks when new contributors clone your project and run npm\u00a0i:</p>\n<pre>npm pkg set scripts.prepare=\"husky install\"</pre>\n<p>Congrats! The next time you author a commit the message will need to be prefixed with chore:, fix:, or feat: otherwise git will throw an error. More information regarding which prefix you should choose when authoring a commit message can be found\u00a0<a href=\"https://www.conventionalcommits.org/en/v1.0.0/#summary\">here</a>.</p>\n<h3>\ud83d\udeb4 Get on the\u00a0Bike</h3>\n<p>The next leg of the journey includes setting up our CI/CD pipeline to build our project, and run our tests. For this section, we\u2019re going to assume that you\u2019ve already built an Angular library and are ready to publish. If you don\u2019t already have a library ready to publish feel free to fork <a href=\"https://github.com/bobbyg603/ngx-toggle\">ngx-toggle</a> so that you can follow\u00a0along.</p>\n<p>First, let\u2019s add an GitHub Actions Workflow for continuous integration. Add the following snippet to a new file\u00a0.github/workflows/ci.yml:</p>\n<a href=\"https://medium.com/media/ea1c68427a6d8350cd33d950dbd95be1/href\">https://medium.com/media/ea1c68427a6d8350cd33d950dbd95be1/href</a><p>In order for GitHub Actions to run this workflow we\u2019ll need to make a few modifications to our Angular library. Add build:app, build:lib, and build:ci scripts to give the build machine a means to build both the library and the\u00a0sample:</p>\n<pre>npm set-script build:app \"ng build ngx-toggle-example --configuration=production --base-href=/ngx-toggle/\"<br>npm set-script build:lib \"ng build ngx-toggle --configuration=production\"<br>npm set-script build:ci \"npm run build:lib &amp;&amp; npm run build:app\"</pre>\n<p>We added a --base-href=/ngx-toggle/ argument to the build script so that we can deploy to a subdirectory of our GitHub Pages user site (more on this\u00a0later).</p>\n<p>We also want to distribute the README.md file at the root of our repo along with the library. Let\u2019s install copyfiles and add one more script to copy README.md into our library\u2019s dist directory every time we run build:lib:</p>\n<pre>npm i -D copyfiles &amp;&amp; npm set-script postbuild:lib \"copyfiles README.md dist/ngx-toggle\"</pre>\n<p>Next, add a ChromeHeadlessCI browser and customerLaunchers entry in each of your projects\u2019 karma.conf.js files. The following snippet should be put at the top-level of the object that is passed to config.set:</p>\n<pre>browsers: [<br>    'Chrome',<br>    'ChromeHeadlessCI'<br>],<br>customLaunchers: {<br>    ChromeHeadlessCI: {<br>        base: 'ChromeHeadless',<br>        flags: ['--no-sandbox']<br>    }<br>},</pre>\n<p>Finally, we need to create test:app test:lib and test:ci scripts in package.json so that we can run our tests on a GitHub Actions compatible browser without pausing for input or displaying progress:</p>\n<pre>npm set-script test:app \"ng test ngx-toggle-example --no-watch --no-progress --browsers=ChromeHeadlessCI\"<br>npm set-script test:lib \"ng test ngx-toggle --no-watch --no-progress --browsers=ChromeHeadlessCI\"<br>npm set-script test:ci \"npm run test:lib &amp;&amp; npm run test:app\"</pre>\n<p>Now that these scripts have been created the ci.yml workflow action will be run for each pull request to the main branch. It\u2019s recommended you require the CI workflow to run before pull requests can be merged into your default branch. For a quick guide that describes branch protection with status checks please see this\u00a0<a href=\"https://medium.com/@bobbyg603/github-status-checks-and-branch-protection-made-easy-b70d6d9ffc76\">article</a>.</p>\n<h3>\ud83c\udfc3 Run to the Finish\u00a0Line</h3>\n<p>The final piece of the puzzle is to release our library and sample each time a change is pushed to our default branch. We will use <a href=\"https://github.com/semantic-release/cli\">semantic-release-cli</a> to publish our package to <a href=\"https://www.npmjs.com/\">npm</a> and our sample to <a href=\"https://pages.github.com/\">GitHub\u00a0Pages</a>.</p>\n<p>Let\u2019s install semantic-release-cli and a few plugins as dev dependencies:</p>\n<pre>npm i -D semantic-release-cli <a href=\"http://twitter.com/semantic\">@semantic</a>-release/changelog <a href=\"http://twitter.com/semantic\">@semantic</a>-release/git</pre>\n<p>Run semantic-release-cli to start the configuration process:</p>\n<pre>npx semantic-release-cli setup</pre>\n<p>The setup command will prompt you to input your credentials in order to configure your release. You\u2019ll need to generate a <a href=\"https://github.com/settings/tokens/new?scopes=repo\">GitHub token</a> with the repo scope. Also, you\u2019ll need to ensure your <a href=\"https://docs.npmjs.com/about-two-factor-authentication#two-factor-authentication-modes-on-npm\">2-FA settings</a> are set to to auth-only:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ATHmTUhxJyqOnnXpipG70w.png\"><figcaption>Terminal Output for Semantic Release\u00a0CLI</figcaption></figure><p>Just to be safe, you should change your npm password after entering it into the\u00a0prompt.</p>\n<p>Next, create a\u00a0.releaserc file at the root of your project so that we can customize semantic-release. We will need to specify the pkgRoot directory in order for @semantic-release/npm to publish the correct list of\u00a0files:</p>\n<a href=\"https://medium.com/media/b19f4b3f77cedc6ccde8356c32a23b91/href\">https://medium.com/media/b19f4b3f77cedc6ccde8356c32a23b91/href</a><p>Next, we\u2019re going to publish our sample to a sub-directory in a <a href=\"https://pages.github.com/\">GitHub Pages user site</a>. You can create a GitHub Pages site for your user or organization by creating a new repo with a name username.github.io being sure to replace username with your username or organization name (e.g. bobbyg603.github.io).</p>\n<p>In order to publish to your GitHub Pages user site you\u2019ll need to generate a <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">personal access token</a> with the repo scope. This token will allow GitHub Actions to publish the sample to your username.github.io user\u00a0site:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/842/1*FUVIydwdZIT1txDaVTesMg.png\"><figcaption>New Personal Access Token with Repo\u00a0Scope</figcaption></figure><p>Once you\u2019ve generated your token, add a GH_TOKEN <a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository\">repository secret</a> so the personal access token can be used by our deployment workflow.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iefQOT8GCf5scmBN6TEHXg.png\"><figcaption>Adding a GH_TOKEN Repository Secret</figcaption></figure><p>We now have all the pieces necessary to create our\u00a0.github/workflows/cd.yml deployment workflow! This workflow will run for every push to our main branch and will publish a new version of our library to <a href=\"https://www.npmjs.com/package/@bobbyg603/ngx-toggle\">npm</a> and copy our sample to our <a href=\"https://bobbyg603.github.io/ngx-toggle/\">GitHub Pages user\u00a0site</a>:</p>\n<a href=\"https://medium.com/media/7117cdc60d2b54fb0023c429718020b8/href\">https://medium.com/media/7117cdc60d2b54fb0023c429718020b8/href</a><p>Under the <strong>Deploy \ud83d\ude80 </strong>step you\u2019ll need to replace the values for repository-name, folder, and target-folder with values that are specific to your GitHub Pages repo and\u00a0project.</p>\n<h3>\ud83c\udfc1 Celebrate Your\u00a0Victory!</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VXa9So6PmB7WRO_ro-ofIQ.gif\"></figure><p>Congratulations!</p>\n<p>You\u2019ve just configured a really powerful CI/CD pipeline for your Angular app! To test the integration, open and merge a pull request to the main\u00a0branch.</p>\n<p>When you open the <a href=\"https://github.com/bobbyg603/ngx-toggle/pull/1\">pull request</a> you should be prevented from merging until the ci.yml <a href=\"https://github.com/bobbyg603/ngx-toggle/runs/5295770975?check_suite_focus=true\">workflow</a> has completed successfully.</p>\n<p>After merging, the cd.yml <a href=\"https://github.com/bobbyg603/ngx-toggle/runs/5295804809?check_suite_focus=true\">workflow</a> should run, create a <a href=\"https://github.com/bobbyg603/ngx-toggle/tags\">tag</a>, generate a GitHub <a href=\"https://github.com/bobbyg603/ngx-toggle/releases/tag/v1.0.1\">release</a>, update <a href=\"https://github.com/bobbyg603/ngx-toggle/blob/main/CHANGELOG.md\">CHANGELOG.md</a>, <a href=\"https://github.com/bobbyg603/ngx-toggle/pulls?q=is%3Apr+is%3Aclosed+label%3Areleased\">label</a> the pull request as released, and <a href=\"https://github.com/bobbyg603/bobbyg603.github.io/commit/02e78c912a1efcc40b9405edc538b44cab5bee5a\">deploy</a> the sample to your <a href=\"https://bobbyg603.github.io/ngx-toggle\">GitHub Pages\u00a0site</a>.</p>\n<pre><strong>Want to Connect?</strong></pre>\n<pre>If you found the information in this tutorial useful please subscribe on <a href=\"http://bobbyg603.medium.com/\">Medium</a>, follow me on <a href=\"https://twitter.com/bobbyg603\">Twitter</a>, and/or subscribe to my <a href=\"https://www.youtube.com/c/bobbyg603\">YouTube</a> channel.</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=be9a1485d22b\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/ci-cd-for-angular-developers-be9a1485d22b\">CI/CD for Angular Developers</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
        "programming",
        "javascript",
        "angular",
        "web-development",
        "github-actions"
    ]
};